<h3>Lesson Page</h3>

<table>
  <tr><td>Start Time</td><td><%=@timeslot.start_time%></td></tr>
  <tr><td>End Time</td><td><%=@timeslot.end_time%></td></tr>

  <tr><td>Status</td><td><% if @lesson.student_ready%><button class="status ready">Ready</button>
  <%else%><button class="status not_ready">Not Ready</button> 
    <%end%></td></tr>
  <tr><td>Other User's Status</td><td><div id="t_ready"><%=@teacher_status%></div></td></tr>
  <tr><td>Other User Online?</td><td><div id="user_online_<%=@teacher_user.id%>"><%=@teacher_user.online%></div></td></tr>
<!---<p><button id="start_lesson" style="display:<%if !@ready_to_start%>none<%end%>">Start Lesson</button> </p>--->
</table>


<%= subscribe_to "/lesson/private/#{@lesson.id}" %>
<%= subscribe_to "/teacher_updates/#{@lesson.id}" %>
  
<div id="chat">
<%= form_tag new_message_path, :remote => true do %>
  <%= text_field_tag :message %>
<%= hidden_field_tag(:lid, value = @lesson.id)%>
  <%= submit_tag "Send" %>
<% end %>
</div>



<div class="container">
<div class="row">
  <!--
<div class="col-xs-12"><button class="btn btn-large btn-success todays_lesson" id="<%=@lesson.id%>"><%if @teacher%>Teach<%else%>Take<%end%> today's lesson</button> -->

<div id="subscriberContainer"></div>
<div id="myPublisherDiv"></div>

<button class="toggleVideo" value=0 style="display:none">Toggle Video </button>

<style>
  .ready {
    background-color: 'green';
  }
  .not_ready {
    background-color: 'red';
  }
</style>
<script>
  
$(document).ready(function() {
 //OPENTOK

      // Initialize API key, session, and token...
      // Think of a session as a room, and a token as the key to get in to the room
      // Sessions and tokens are generated on your server and passed down to the client
      var apiKey = "45159872"; 
      var sessionId; //="2_MX40NTE1OTg3Mn5-MTQyNDM5MjUyNzgxOH5BbDV0blZxOHkxWXZGUGJvallMOVk1WUR-fg";
      var token;// =  "T1==cGFydG5lcl9pZD00NTE1OTg3MiZzaWc9ZGZlNmM1NGNjNWRiYjI5MmU2ODE3ZjBjNTZlYjNkYzA0YTExYjIzNzpyb2xlPXB1Ymxpc2hlciZzZXNzaW9uX2lkPTJfTVg0ME5URTFPVGczTW41LU1UUXlORE01TWpVeU56Z3hPSDVCYkRWMGJsWnhPSGt4V1haR1VHSnZhbGxNT1ZrMVdVUi1mZyZjcmVhdGVfdGltZT0xNDI0MzkyNTU3Jm5vbmNlPTAuNTc5MjQ3MjAzODcxOTM3Ng==";
	  var session;
	  var subscriber;
	  var stream;
	  var subscriberProperties;
	  var publisherName;
	  var pHeight = 100;
	  var pWidth = 150;
	  var sHeight = 400;
	  var sWidth = 600;
	  var videoResolution = "1280x720";
	  var videoFrameRate = 30;	
	  var role = 'student'; // '<%=@user.role%>';
	  var otherUserReady;
    var streamStarted = false;

  
  if ($('#t_ready').text() == 'Ready') {
       otherUserReady = true;
     }
  else {
       otherUserReady = false;
  }
  
    $.ajax({
    	method: 'GET',
        url: '/lesson/get_video_keys?lid=<%=@lesson.id%>',
        dataType: 'json',	
        async: false,
        success: function(keysHash) {
        //	publisherName = keysHash.studentName;
       		sessionID = keysHash.sessionID;
       		token = keysHash.token;
       		session = OT.initSession(apiKey, sessionID);
    }
    });
  
 
   
    PrivatePub.subscribe("/lesson/private/<%=@lesson.id%>", function(data) {
   alert(data.msg);
  });
   

    PrivatePub.subscribe("/teacher_updates/<%=@lesson.id%>", function(data) {
      console.log(data);
      if (data.status == 'true') {
        otherUserReady = true;
        $('#t_ready').text("Ready.");
      } 
      else {
        otherUserReady = false;
       $('#t_ready').text("Not Ready.");
      }
      if (data.start_lesson) {
        $('#start_lesson').show();
      }
      else {
        $('#start_lesson').hide();
      }
      });   
 
  $('body').on('click', '.not_ready', function() {
    $.ajax({ url:'/student/update_lesson_status', type:'POST', data: {'lid': '<%=@lesson.id%>', 'ready': 'true'} });
    $(this).removeClass('not_ready').addClass('ready');
    $(this).text('Ready');
     startVideo();
   });

   $('body').on('click', '.ready', function() {
     $.ajax({ url:'/student/update_lesson_status', type:'POST', data: {'lid': '<%=@lesson.id%>', 'ready': 'false'} });
     $(this).removeClass('ready').addClass('not_ready');
     $(this).text('Not Ready');
   });

  
     


/*
  session.connect(token, function(error) {
    var publisher = OT.initPublisher();
    session.publish(publisher);
  });
  */  
     
  // This is the other user, connecting in
	session.on("streamCreated", function (event) {
    if (confirm('Start class?')) {
        if (!streamStarted) {
         publishVideo();
        }
        stream = event.stream;
        subscriberProperties = {insertMode: "append", height: sHeight, width: sWidth};
        subscriber = session.subscribe(stream, 'subscriberContainer', subscriberProperties, function (error) {
        if (error) {
          console.log(error);
        }
        else {
          console.log("Subscriber added.");
        }
        });
  }
	});

     // This is the current user, smaller screen
function startVideo() {
     session.connect(token, function(error) {
    if (error) {
    alert("Error connecting: ", error.code, error.message);
      } 
     else {
       		publisherProperties = {name: publisherName, width: pWidth, height: pHeight, resolution: videoResolution,
	    							frameRate: videoFrameRate};
           if (otherUserReady) {
              publishVideo();
           }
      }
     }); 
  };

  function publishVideo() {
      publisher = OT.initPublisher('myPublisherDiv', publisherProperties);
     session.publish(publisher);
    streamStarted = true;
  }

  function endVideo() {
		session.unsubscribe(stream);
		session.unpublish(publisher);
  }
     
     
/*
	$('.unsubscribe').click(function() {
	});
	
	
	$('.unpublish').click(function() {
	});
	
	$('.resizeVideo').click(function() {
    	var pubElement = $('#myPublisherDiv');
    	pubElement.css("width","100");
    	pubElement.css("height","100");
  	});
  	*/
  	$('.toggleVideo').click(function() {
  		if ($(this).val() == 0 ) {
  			$(this).val(1);
  			$(this).html('Turn Video On');
  			publisher.publishVideo(false);
  		}
  		else {
  			$(this).val(0);
  			$(this).html('Turn Video Off');
  			 publisher.publishVideo(true);
  		}
  	});
  
  	/*
  	
  	var start = new Date;

	setInterval(function() {
    	$('.Timer').text((new Date - start) / 1000 + " Seconds");
	}, 1000);
*/	
   });
     
     ///////////////

   /*
  $('.start_lesson').click(function() {
     var now = new Date();
    $.ajax({
      url: '/lesson/begin',
      data: {'start_time': now, 'lesson_id': '<%=@lesson.id%>'},
      type: 'GET',
      success: function(message) {
        if (message == "Success") {
          alert("The lesson was started at " + now);
        }
        else {
           alert("You cannot start a lesson at this time."); 
        }
      },
      failure: function() {
        alert('Sorry. We were not able to connect to the database.');
      }
    })
   });
  
    $('.end_lesson').click(function() {
     var now = new Date();
    $.ajax({
      url: '/lesson/end',
      data: {'end_time': now, 'lesson_id': '<%=@lesson.id%>'},
      type: 'GET',
      success: function(message) {
        if (message == "Failure") {
          alert("You cannot end the lesson at this time."); 
        }
        else {
          alert("The lesson was ended at " + now + ". The total time was " + message +" minutes.");
        }
      },
      failure: function() {
        alert('Sorry. We were not able to connect to the database.');
      }
    })
   });

 $(function() { 
     var client = new Faye.Client('http://steady-box-12-181649.use1-2.nitrousbox.com:9292/faye')
     client.subscribe("/lessons/new", function(data) {
       if (data.teacher) {
         alert('Teacher is ready to start the class!');
       }
       else if (data.student) {
         alert('Teacher is ready to start the class!');
       
       }
                console.log(data);

       });
                      
     }); 
    

 
  $('#user_join').click(function(){
      // Publish the message to the public channel
    $.ajax({
      url: '/student/lesson_ready',
      type: 'GET',
      data: {'student_id' : '<%=@user_id%>'},
      success: function(data) {
        if (data == 'Success') {
          client.publish('/lessons/new', {
            username: 'hey',
            msg: 'msg'
          });
        }
        else {
          alert('Unable to set status to ready at this time.');
        }
      },
      failure: function() {
        alert('Unable to connect to database.');
      }
    });

    });


 */

</script>
